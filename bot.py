# bot.py
# -*- coding: utf-8 -*-
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ—Å—Ç–∞ ¬´–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ¬ª –∏ —É–¥–æ–±–Ω–æ–π –∑–∞–º–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–π –º–µ—Å—Ç–∞–º–∏.
# –¢—Ä–µ–±—É–µ—Ç—Å—è python-telegram-bot >= 20.0

from __future__ import annotations

import logging
import os
from typing import Dict, List, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)

# ----------------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø -----------------------
def _env(name, *alts, default=None):
    for k in (name, *alts):
        v = os.getenv(k)
        if v:
            return v
    return default

TOKEN = _env("API_TOKEN", "TELEGRAM_TOKEN")
CHANNEL_ID = int(_env("CHANNEL_ID", "TARGET_CHAT_ID", "CHAT_ID", default="0"))
_admin_raw = _env("ADMIN_ID", "ADMIN_IDS", default="")
ADMIN_IDS = {int(x) for x in _admin_raw.replace(" ", "").split(",") if x}
NEW_ARRIVALS_URL = _env(
    "NEW_ARRIVALS_URL",
    default="https://zamorskiepodarki.com/uk/novoe-postuplenie/"
)

missing = []
if not TOKEN:
    missing.append("API_TOKEN")
if not ADMIN_IDS:
    missing.append("ADMIN_ID")
if missing:
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω—ñ " + ", ".join(missing) + " —É Render.")
# CHANNEL_ID –º–æ–∂–µ –±—É—Ç–∏ 0 ‚Äî —Ç–æ–¥—ñ /publish –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–µ—Ä–µ–¥–∏—Ç—å
# ------------------------------------------------------------

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("new_arrivals_bot_ru")

# –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º-–∞–¥–º–∏–Ω–∞–º.
DRAFTS: Dict[int, Dict[str, Any]] = {}


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def ensure_draft(user_id: int) -> Dict[str, Any]:
    if user_id not in DRAFTS:
        DRAFTS[user_id] = {"items": [], "cursor": 0}
    return DRAFTS[user_id]


def parse_item_line(text: str) -> Dict[str, str]:
    for sep in ["‚Äî", "‚Äì", "  |  ", " | ", " - ", " ‚Äî ", " ‚Äì "]:
        text = text.replace(sep, "|")
    text = text.replace(" |", "|").replace("| ", "|").replace(" -", "|").replace("- ", "|")
    parts = [p.strip() for p in text.split("|") if p.strip()]
    title = parts[0] if parts else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    price = parts[1] if len(parts) > 1 else ""
    note = parts[2] if len(parts) > 2 else ""
    return {"title": title, "price": price, "note": note}


def render_items(items: List[Dict[str, str]]) -> str:
    lines = []
    for i, it in enumerate(items, 1):
        tail = []
        if it.get("price"):
            tail.append(it["price"])
        if it.get("note"):
            tail.append(it["note"])
        lines.append(f"{i}) {it['title']}" + ((" - " + " - ".join(tail)) if tail else ""))
    return "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏."


def render_post(items: List[Dict[str, str]]) -> str:
    header = "–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n"
    link = f"–°–º–æ—Ç—Ä–∏ –≤—Å–µ –Ω–æ–≤–∏–Ω–∫–∏: {NEW_ARRIVALS_URL}\n"
    body = render_items(items)
    return f"{header}\n{link}\n{body}"


def kb_main() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="na:add_hint"),
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="na:clear_confirm"),
        ],
        [InlineKeyboardButton("üß≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="na:edit")],
        [
            InlineKeyboardButton("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="na:preview"),
            InlineKeyboardButton("üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="na:publish"),
        ],
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –Ω–æ–≤–∏–Ω–æ–∫", url=NEW_ARRIVALS_URL)],
    ]
    return InlineKeyboardMarkup(kb)


def kb_edit(cursor: int, total: int) -> InlineKeyboardMarkup:
    left_disabled = cursor <= 0
    right_disabled = cursor >= (total - 1)
    btn_prev = InlineKeyboardButton("‚óÄ", callback_data="na:nav_prev" if not left_disabled else "na:nop")
    btn_next = InlineKeyboardButton("‚ñ∂", callback_data="na:nav_next" if not right_disabled else "na:nop")
    kb = [
        [btn_prev, InlineKeyboardButton(f"–ü–æ–∑–∏—Ü–∏—è {cursor + 1} –∏–∑ {total}", callback_data="na:nop"), btn_next],
        [
            InlineKeyboardButton("‚¨ÜÔ∏è –í—ã—à–µ", callback_data="na:up"),
            InlineKeyboardButton("‚¨áÔ∏è –ù–∏–∂–µ", callback_data="na:down"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="na:del"),
        ],
        [InlineKeyboardButton("üîô –ì–æ—Ç–æ–≤–æ", callback_data="na:done")],
    ]
    return InlineKeyboardMarkup(kb)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return
    ensure_draft(user.id)
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –ì–æ—Ç–æ–≤ —Å–æ–±—Ä–∞—Ç—å –ø–æ—Å—Ç ¬´–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ¬ª.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ø–ª—é—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ê—Ä–æ–º–∞–ª–∞–º–ø–∞ –õ–æ—Ç–æ—Å | 399 –≥—Ä–Ω | –∫–µ—Ä–∞–º–∏–∫–∞, 12 —Å–º\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/preview - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb_main(),
    )


async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(f"chat_id: {update.effective_chat.id}")


async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return
    DRAFTS[user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω–æ–∫.", reply_markup=kb_main())


async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return
    draft = ensure_draft(user.id)
    await update.effective_message.reply_text(render_items(draft["items"]), disable_web_page_preview=True)


async def cmd_clear(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return
    DRAFTS[user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.", reply_markup=kb_main())


async def cmd_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return
    draft = ensure_draft(user.id)
    await update.effective_message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)


async def cmd_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return

    # ‚úÖ –ó–∞—Ö–∏—Å—Ç: —è–∫—â–æ CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É Render ‚Äî –Ω–µ –ø–∞–¥–∞—î–º–æ, –∞ –ø—ñ–¥–∫–∞–∑—É—î–º–æ —â–æ –∑—Ä–æ–±–∏—Ç–∏
    if CHANNEL_ID == 0:
        await update.effective_message.reply_text(
            "CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É Render. –î–æ–¥–∞–π –∑–º—ñ–Ω–Ω—É CHANNEL_ID —ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤—ñ—Å."
        )
        return

    draft = ensure_draft(user.id)
    if not draft["items"]:
        await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é.")
        return

    text = render_post(draft["items"])
    await context.bot.send_message(CHANNEL_ID, text, disable_web_page_preview=False)
    await update.effective_message.reply_text("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.", reply_markup=kb_main())



async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not is_admin(user.id):
        return
    text = (update.message.text or "").strip()
    if not text:
        return
    draft = ensure_draft(user.id)
    lines = [ln.strip() for ln in text.split("\n") if ln.strip()]
    for ln in lines:
        draft["items"].append(parse_item_line(ln))
    await update.effective_message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(lines)}\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(draft['items'])}",
        reply_markup=kb_main(),
        disable_web_page_preview=True,
    )


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    if not is_admin(user.id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await query.answer()
    draft = ensure_draft(user.id)
    data = query.data or "na:nop"

    if data == "na:nop":
        return

    if data == "na:add_hint":
        await query.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ø–ª—é—Å\n\n"
            "–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ ‚Äî –∫–∞–∂–¥–∞—è —Å—Ç–∞–Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π."
        )
        return

    if data == "na:clear_confirm":
        DRAFTS[user.id] = {"items": [], "cursor": 0}
        await query.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.", reply_markup=kb_main())
        return

    if data == "na:preview":
        await query.message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)
        return

    if data == "na:publish":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.")
            return
        await context.bot.send_message(CHANNEL_ID, render_post(draft["items"]), disable_web_page_preview=False)
        await query.message.reply_text("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.", reply_markup=kb_main())
        return

    if data == "na:edit":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏.")
            return
        idx = max(0, min(draft["cursor"], len(draft["items"]) - 1))
        draft["cursor"] = idx
        it = draft["items"][idx]
        await query.message.reply_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞.\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {idx + 1}/{len(draft['items'])}:\n"
            f"{it['title']}" + (f" - {it['price']}" if it.get("price") else "") + (f" - {it['note']}" if it.get("note") else ""),
            reply_markup=kb_edit(idx, len(draft["items"])),
        )
        return

    if data in {"na:nav_prev", "na:nav_next", "na:up", "na:down", "na:del", "na:done"}:
        items = draft["items"]
        if not items:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        idx = draft["cursor"]

        if data == "na:nav_prev":
            idx = max(0, idx - 1)
            draft["cursor"] = idx
        elif data == "na:nav_next":
            idx = min(len(items) - 1, idx + 1)
            draft["cursor"] = idx
        elif data == "na:up" and idx > 0:
            items[idx - 1], items[idx] = items[idx], items[idx - 1]
            idx -= 1
            draft["cursor"] = idx
        elif data == "na:down" and idx < len(items) - 1:
            items[idx + 1], items[idx] = items[idx], items[idx + 1]
            idx += 1
            draft["cursor"] = idx
        elif data == "na:del":
            removed = items.pop(idx)
            if idx >= len(items):
                idx = max(0, len(items) - 1)
            draft["cursor"] = idx
            await query.message.reply_text(
                f"–£–¥–∞–ª–µ–Ω–æ: {removed['title']}\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(items)}",
                disable_web_page_preview=True,
            )
            if not items:
                await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=kb_main())
                return
        elif data == "na:done":
            await query.message.reply_text("–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_main())
            return

        if items:
            it = items[draft["cursor"]]
            await query.message.reply_text(
                f"–ü–æ–∑–∏—Ü–∏—è {draft['cursor'] + 1}/{len(items)}:\n"
                f"{it['title']}" + (f" - {it['price']}" if it.get("price") else "") + (f" - {it['note']}" if it.get("note") else ""),
                reply_markup=kb_edit(draft["cursor"], len(items)),
            )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    await update.effective_message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –º–µ–Ω—é\n"
        "/new ‚Äî –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/preview ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "/publish ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∞–º–∏: ¬´–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ø–ª—é—Å¬ª."
    )


def main() -> None:
    app: Application = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("new", cmd_new))
    app.add_handler(CommandHandler("list", cmd_list))
    app.add_handler(CommandHandler("clear", cmd_clear))
    app.add_handler(CommandHandler("preview", cmd_preview))
    app.add_handler(CommandHandler("publish", cmd_publish))
    app.add_handler(CommandHandler("id", cmd_id))  # <-- –±—É–ª–æ –ø–æ–∑–∞ main(), —Ç–µ–ø–µ—Ä –æ–∫
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    log.info("Bot started")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()


