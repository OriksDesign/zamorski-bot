# bot.py

import os
import asyncio
import pymysql
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ pymysql
try:
    connection = pymysql.connect(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    print("‚úÖ Database connection successful")
except pymysql.MySQLError as e:
    print(f"‚ùå Database connection failed: {e}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
try:
    with connection.cursor() as cursor:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id BIGINT NOT NULL UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        ''')
    connection.commit()
    print("‚úÖ Subscribers table ready")
except pymysql.MySQLError as e:
    print(f"‚ùå Failed to create subscribers table: {e}")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class SendNews(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

class OperatorQuestion(StatesGroup):
    waiting_for_question = State()

async def log_error(error_message):
    try:
        await bot.send_message(ADMIN_ID, f"üö® –ü–æ–º–∏–ª–∫–∞: {error_message}")
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É: {e}")


def get_main_keyboard(user_id):
    buttons = [
        [types.KeyboardButton(text="–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
        [types.KeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
        [types.KeyboardButton(text="–ù–æ–≤–∏–Ω–∫–∏")],
        [types.KeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([types.KeyboardButton(text="–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")])
    return types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        is_persistent=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        print(f"‚úÖ Start command received from {message.from_user.id}")
        save_user(message.from_user.id)
        await message.answer("–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ –ó–∞–º–æ—Ä—Å—å–∫—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏! –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞:", reply_markup=get_main_keyboard(message.from_user.id))
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ: {e}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    try:
        print(f"‚úÖ Help command received from {message.from_user.id}")
        await message.answer("""\n/start ‚Äì –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n/help ‚Äì –Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç\n/sendnews ‚Äì –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–∑—Å–∏–ª–∫–∞)\n""", reply_markup=get_main_keyboard(message.from_user.id))
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É /help: {e}")

@dp.message(F.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
async def subscribe_user(message: types.Message):
    try:
        print(f"‚úÖ Subscribe command received from {message.from_user.id}")
        if is_user_saved(message.from_user.id):
            await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=get_main_keyboard(message.from_user.id))
        else:
            save_user(message.from_user.id)
            await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=get_main_keyboard(message.from_user.id))
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ: {e}")

@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def ask_operator(message: types.Message, state: FSMContext):
    try:
        print(f"‚úÖ Operator question initiated by {message.from_user.id}")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
        await state.set_state(OperatorQuestion.waiting_for_question)
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")

@dp.message(OperatorQuestion.waiting_for_question)
async def forward_question(message: types.Message, state: FSMContext):
    try:
        print(f"‚úÖ Forwarding question from {message.from_user.id}")
        await bot.send_message(ADMIN_ID, f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}:
{message.text}")
        await message.answer("–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!")
        await state.clear()
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")


def save_user(user_id):
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM subscribers WHERE user_id = %s", (user_id,))
            if not cursor.fetchone():
                cursor.execute("INSERT INTO subscribers (user_id) VALUES (%s)", (user_id,))
                connection.commit()
                asyncio.create_task(bot.send_message(ADMIN_ID, f"–ù–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫: {user_id}"))
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")


def is_user_saved(user_id):
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM subscribers WHERE user_id = %s", (user_id,))
            return cursor.fetchone() is not None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return False


async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        await log_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
