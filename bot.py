# bot.py
# -*- coding: utf-8 -*-
# –ë–æ—Ç ¬´–ó–∞–º–æ—Ä—Å—å–∫—ñ –ü–æ–¥–∞—Ä—É–Ω–∫–∏¬ª
# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: –º–µ–Ω—é (–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É / –ù–æ–≤–∏–Ω–∫–∏ / –£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ)
# –ê–¥–º—ñ–Ω–∏: —Ä–µ–¥–∞–∫—Ç–æ—Ä ¬´–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª (–¥–æ–¥–∞—Ç–∏, –ø–æ—Ä—è–¥–æ–∫, –ø–µ—Ä–µ–≥–ª—è–¥, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑ —Ñ–æ—Ç–æ)

from __future__ import annotations

import logging
import os
import re
from typing import Dict, List, Any, Tuple

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto,
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)
from telegram import InputMediaPhoto
import re

# ===================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (Render env) =====================

def _env(name, *alts, default=None):
    for k in (name, *alts):
        v = os.getenv(k)
        if v:
            return v
    return default

TOKEN = _env("API_TOKEN", "TELEGRAM_TOKEN")
CHANNEL_ID = int(_env("CHANNEL_ID", "TARGET_CHAT_ID", "CHAT_ID", default="0"))
_admin_raw = _env("ADMIN_ID", "ADMIN_IDS", default="")
ADMIN_IDS = {int(x) for x in _admin_raw.replace(" ", "").split(",") if x}
NEW_ARRIVALS_URL = _env(
    "NEW_ARRIVALS_URL",
    default="https://zamorskiepodarki.com/uk/novoe-postuplenie/"
)
# –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ —Ü—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ /dest)
PUBLISH_CHAT_ID = CHANNEL_ID

missing = []
if not TOKEN:
    missing.append("API_TOKEN")
if not ADMIN_IDS:
    missing.append("ADMIN_ID")
if missing:
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω—ñ " + ", ".join(missing) + " —É Render.")

# ============================== –õ–û–ì–Ü–ù–ì ===============================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("zamorski-bot")

# ============================ –°–•–û–í–ò–©–ê/–°–¢–ê–ù–ò ===========================

# –ß–µ—Ä–Ω–µ—Ç–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ (—Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω–æ–∫)
DRAFTS: Dict[int, Dict[str, Any]] = {}
# –û—á—ñ–∫—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
WAITING_QUESTION: Dict[int, bool] = {}
# –ú–∞–ø–∞ ¬´—Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ ‚Üí user_id¬ª –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
SUPPORT_THREADS: Dict[Tuple[int, int], int] = {}
THREAD_NO = 1

# ============================= –£–¢–ò–õ–Ü–¢–ò ===============================

URL_RE = re.compile(r'(https?://\S+)')

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def ensure_draft(user_id: int) -> Dict[str, Any]:
    if user_id not in DRAFTS:
        DRAFTS[user_id] = {"items": [], "cursor": 0}
    return DRAFTS[user_id]

URL_RE = re.compile(r'(https?://\S+)')

def parse_item_line(text: str) -> Dict[str, str]:
    text = (text or "").strip()
    m = URL_RE.search(text)
    url = m.group(1) if m else ""
    if url:
        text = URL_RE.sub("", text).strip()

    for sep in ["‚Äî", "‚Äì", "  |  ", " | ", " - ", " ‚Äî ", " ‚Äì "]:
        text = text.replace(sep, "|")
    text = text.replace(" |", "|").replace("| ", "|").replace(" -", "|").replace("- ", "|")

    parts = [p.strip() for p in text.split("|") if p.strip()]
    title = parts[0] if parts else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    price = parts[1] if len(parts) > 1 else ""
    note  = parts[2] if len(parts) > 2 else ""

    # ‚¨áÔ∏è –¥–æ–¥–∞–Ω–æ doc_id
    return {"title": title, "price": price, "note": note, "url": url, "photo_id": "", "doc_id": ""}


def render_items(items: List[Dict[str, str]]) -> str:
    if not items:
        return "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó."
    out = []
    for i, it in enumerate(items, 1):
        tail = []
        if it.get("price"):
            tail.append(it["price"])
        if it.get("note"):
            tail.append(it["note"])
        out.append(f"{i}) {it['title']}" + ((" ‚Äî " + " ‚Äî ".join(tail)) if tail else ""))
        if it.get("url"):
            out.append(it["url"])
    return "\n".join(out)

def render_post(items: List[Dict[str, str]]) -> str:
    header = "–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è\n"
    link = f"–î–∏–≤–∏—Å—å –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏: {NEW_ARRIVALS_URL}\n"
    return f"{header}\n{link}\n{render_items(items)}"

def render_caption(item: Dict[str, str], idx: int | None = None) -> str:
    line = f"{idx}) {item['title']}" if idx else item["title"]
    tail = []
    if item.get("price"): tail.append(item["price"])
    if item.get("note"):  tail.append(item["note"])
    if tail: line += " ‚Äî " + " ‚Äî ".join(tail)
    if item.get("url"):  line += "\n" + item["url"]
    return line

def kb_main_admin() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é", callback_data="na:add_hint"),
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="na:clear_confirm"),
        ],
        [InlineKeyboardButton("üß≠ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", callback_data="na:edit")],
        [
            InlineKeyboardButton("üëÅ –ü–µ—Ä–µ–≥–ª—è–¥", callback_data="na:preview"),
            InlineKeyboardButton("üì£ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="na:publish"),
        ],
        [InlineKeyboardButton("üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª –Ω–æ–≤–∏–Ω–æ–∫", url=NEW_ARRIVALS_URL)],
    ]
    return InlineKeyboardMarkup(kb)

USER_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton("–ù–æ–≤–∏–Ω–∫–∏"), KeyboardButton("–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
    ],
    resize_keyboard=True
)

def kb_edit(cursor: int, total: int) -> InlineKeyboardMarkup:
    left_disabled = cursor <= 0
    right_disabled = cursor >= (total - 1)
    btn_prev = InlineKeyboardButton("‚óÄ", callback_data="na:nav_prev" if not left_disabled else "na:nop")
    btn_next = InlineKeyboardButton("‚ñ∂", callback_data="na:nav_next" if not right_disabled else "na:nop")
    kb = [
        [btn_prev, InlineKeyboardButton(f"–ü–æ–∑–∏—Ü—ñ—è {cursor + 1} –∑ {total}", callback_data="na:nop"), btn_next],
        [
            InlineKeyboardButton("‚¨ÜÔ∏è –í–∏—â–µ", callback_data="na:up"),
            InlineKeyboardButton("‚¨áÔ∏è –ù–∏–∂—á–µ", callback_data="na:down"),
            InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="na:del"),
        ],
        [InlineKeyboardButton("üîô –ì–æ—Ç–æ–≤–æ", callback_data="na:done")],
    ]
    return InlineKeyboardMarkup(kb)

# ============================= –ö–û–ú–ê–ù–î–ò ===============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    ensure_draft(user.id)
    greet = (
        "–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ ¬´–ó–∞–º–æ—Ä—Å—å–∫—ñ –ü–æ–¥–∞—Ä—É–Ω–∫–∏¬ª!\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É —á–∞—Ç."
    )
    if is_admin(user.id):
        greet += (
            "\n\n–†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –¥–ª—è ¬´–ù–æ–≤–æ–≥–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "
            "/new /list /clear /preview /publish –∞–±–æ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é."
        )
    await update.effective_message.reply_text(greet, reply_markup=USER_KB)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    txt = [
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:",
        "‚Ä¢ /start ‚Äî –º–µ–Ω—é",
        "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id",
        "‚Ä¢ /whoami ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—ñ–≤",
    ]
    if is_admin(update.effective_user.id):
        txt += [
            "",
            "–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:",
            "‚Ä¢ /new /list /clear /preview /publish ‚Äî —Ä–æ–±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–Ω–∫–∞–º–∏",
            "‚Ä¢ /dest ‚Äî –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–ª—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (here|env|<id>)",
            "‚Ä¢ –©–æ–± –¥–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –∑ —Ñ–æ—Ç–æ ‚Äî –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º: '–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –ø–ª—é—Å | URL'",
        ]
    await update.effective_message.reply_text("\n".join(txt), reply_markup=USER_KB)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(f"chat_id: {update.effective_chat.id}")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "user_id: {}\nadmin_ids: {}\nCHANNEL_ID: {}\nPUBLISH_CHAT_ID: {}".format(
            update.effective_user.id, sorted(list(ADMIN_IDS)), CHANNEL_ID, PUBLISH_CHAT_ID
        )
    )

async def cmd_dest(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    global PUBLISH_CHAT_ID
    args = context.args or []
    if not args:
        await update.effective_message.reply_text(
            "–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {}\n\n"
            "–í–∞—Ä—ñ–∞–Ω—Ç–∏:\n"
            "/dest here ‚Äî –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "/dest env ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CHANNEL_ID –∑ Render\n"
            "/dest <id> ‚Äî –∑–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π chat_id (—á–∏—Å–ª–æ–º)".format(
                PUBLISH_CHAT_ID or "–Ω–µ –∑–∞–¥–∞–Ω–æ"
            )
        )
        return
    arg = args[0].lower()
    if arg == "here":
        PUBLISH_CHAT_ID = update.effective_chat.id
        await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ü—É–±–ª—ñ–∫—É—î–º–æ —Å—é–¥–∏: {PUBLISH_CHAT_ID}")
    elif arg == "env":
        PUBLISH_CHAT_ID = CHANNEL_ID
        await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–∞ CHANNEL_ID: {PUBLISH_CHAT_ID}")
    else:
        try:
            PUBLISH_CHAT_ID = int(arg)
            await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–∞ —Ü—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {PUBLISH_CHAT_ID}")
        except ValueError:
            await update.effective_message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ id. –ü—Ä–∏–∫–ª–∞–¥: /dest -1001234567890")

# ======================== –ö–û–†–ò–°–¢–£–í–ê–ß: –ú–ï–ù–Æ/–ö–ù–û–ü–ö–ò =======================

async def handle_user_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    text = (update.message.text or "").strip().lower()

    if text == "–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É":
        WAITING_QUESTION[user.id] = True
        await update.effective_message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª –∑ –ø—ñ–¥–ø–∏—Å–æ–º) ‚Äî —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
            reply_markup=USER_KB
        )
        return

    if text == "–Ω–æ–≤–∏–Ω–∫–∏":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç", url=NEW_ARRIVALS_URL)]])
        await update.effective_message.reply_text("–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–º–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è–º–∏ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ:", reply_markup=kb)
        return

    if text == "—É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ":
        await update.effective_message.reply_text(
            "–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\n"
            "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –£–∫—Ä–∞—ó–Ω–æ—é ‚Äî –ù–æ–≤–∞ –ü–æ—à—Ç–∞\n"
            "‚Ä¢ –û–ø–ª–∞—Ç–∞ ‚Äî –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n"
            "‚Ä¢ –£ —Ä–∞–∑—ñ –±—Ä–∞–∫—É ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ; –º–æ–∂–ª–∏–≤–∏–π –æ–±–º—ñ–Ω –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤\n"
            "–ü–∏—Ç–∞–Ω–Ω—è? –û–±–µ—Ä—ñ—Ç—å ¬´–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É¬ª —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º.",
            reply_markup=USER_KB
        )
        return

# ======================== –°–ê–ü–û–†–¢: –ü–ò–¢–ê–ù–ù–Ø/–í–Ü–î–ü–û–í–Ü–î–Ü =====================

async def _notify_admins_about_question(update: Update, context: ContextTypes.DEFAULT_TYPE, header_text: str):
    global SUPPORT_THREADS
    for admin_id in ADMIN_IDS:
        header = await context.bot.send_message(
            admin_id,
            header_text + "\n\n–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É: –∑—Ä–æ–±—ñ—Ç—å ¬´Reply¬ª –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
        )
        SUPPORT_THREADS[(admin_id, header.message_id)] = update.effective_user.id

        # –¥–æ–∫–ª–∞–¥–∞—î–º–æ –∑–º—ñ—Å—Ç
        if update.message and (update.message.photo or update.message.document or update.message.video or update.message.voice):
            copied = await context.bot.copy_message(
                chat_id=admin_id,
                from_chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
            SUPPORT_THREADS[(admin_id, copied.message_id)] = update.effective_user.id
        elif update.message and update.message.text:
            body_msg = await context.bot.send_message(admin_id, "–¢–µ–∫—Å—Ç: " + update.message.text)
            SUPPORT_THREADS[(admin_id, body_msg.message_id)] = update.effective_user.id

async def on_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≤–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ¬´–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É¬ª."""
    user_id = update.effective_user.id
    if not WAITING_QUESTION.get(user_id):
        return
    WAITING_QUESTION[user_id] = False

    global THREAD_NO
    thread = THREAD_NO
    THREAD_NO += 1

    header = f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}\nThread #{thread}"
    await _notify_admins_about_question(update, context, header)

    await update.effective_message.reply_text("–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!", reply_markup=USER_KB)

async def on_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–≤ —Ä–µ–ø–ª–∞—î–º –Ω–∞ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—à–ª–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    if not is_admin(update.effective_user.id):
        return
    reply = update.message.reply_to_message
    if not reply:
        return
    key = (update.effective_user.id, reply.message_id)
    user_id = SUPPORT_THREADS.get(key)
    if not user_id:
        return
    await context.bot.copy_message(
        chat_id=user_id,
        from_chat_id=update.effective_chat.id,
        message_id=update.message.message_id
    )
    await update.effective_message.reply_text("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ‚úÖ")

# ===================== –ê–î–ú–Ü–ù: ¬´–ù–û–í–ï –ù–ê–î–•–û–î–ñ–ï–ù–ù–Ø¬ª =====================

async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    DRAFTS[update.effective_user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω–æ–∫.", reply_markup=kb_main_admin())

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    draft = ensure_draft(update.effective_user.id)
    await update.effective_message.reply_text(render_items(draft["items"]), disable_web_page_preview=True)

async def cmd_clear(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    DRAFTS[update.effective_user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.", reply_markup=kb_main_admin())

async def cmd_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    draft = ensure_draft(update.effective_user.id)
    await update.effective_message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)

    # —Ñ–æ—Ç–æ–ø—Ä–µ–≤'—é –ø–µ—Ä—à–∏—Ö –¥–æ 10 —Ñ–æ—Ç–æ
    media = []
    for i, it in enumerate(draft["items"], 1):
        if it.get("photo_id"):
            media.append(InputMediaPhoto(media=it["photo_id"], caption=render_caption(it, i)))
        if len(media) == 10:
            break
    if media:
        await update.effective_message.reply_media_group(media=media)

async def cmd_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    if not PUBLISH_CHAT_ID:
        await update.effective_message.reply_text("–¶—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ –∑–∞–¥–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /dest here –∞–±–æ /dest <id>.")
        return
    draft = ensure_draft(update.effective_user.id)
    if not draft["items"]:
        await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é.")
        return

    await context.bot.send_message(PUBLISH_CHAT_ID, f"–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è\n\n–î–∏–≤–∏—Å—å –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏: {NEW_ARRIVALS_URL}")

    batch: List[InputMediaPhoto] = []
    idx = 1
    for it in draft["items"]:
        if it.get("photo_id"):
            batch.append(InputMediaPhoto(media=it["photo_id"], caption=render_caption(it, idx)))
            if len(batch) == 10:
                await context.bot.send_media_group(PUBLISH_CHAT_ID, media=batch)
                batch.clear()
        elif it.get("doc_id"):
            if batch:
                await context.bot.send_media_group(PUBLISH_CHAT_ID, media=batch)
                batch.clear()
            await context.bot.send_document(PUBLISH_CHAT_ID, it["doc_id"], caption=render_caption(it, idx))
        else:
            if batch:
                await context.bot.send_media_group(PUBLISH_CHAT_ID, media=batch)
                batch.clear()
            await context.bot.send_message(PUBLISH_CHAT_ID, render_caption(it, idx), disable_web_page_preview=False)
        idx += 1
    if batch:
        await context.bot.send_media_group(PUBLISH_CHAT_ID, media=batch)

    await update.effective_message.reply_text("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=kb_main_admin())


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    if not is_admin(user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    await query.answer()
    draft = ensure_draft(user.id)
    data = query.data or "na:nop"

    if data == "na:nop":
        return
    if data == "na:add_hint":
        await query.message.reply_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º:\n"
            "–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –ø–ª—é—Å | URL (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)\n\n"
            "–ú–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ ‚Äî –∫–æ–∂–µ–Ω —Å—Ç–∞–Ω–µ –æ–∫—Ä–µ–º–æ—é –ø–æ–∑–∏—Ü—ñ—î—é.\n"
            "–ü–æ–∑–∏—Ü—ñ—é –∑ —Ñ–æ—Ç–æ –¥–æ–¥–∞–π—Ç–µ —è–∫ ¬´—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º¬ª —É —Ç–∞–∫–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ."
        )
        return
    if data == "na:clear_confirm":
        DRAFTS[user.id] = {"items": [], "cursor": 0}
        await query.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.", reply_markup=kb_main_admin())
        return
    if data == "na:preview":
        await query.message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)
        return
    if data == "na:publish":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é.")
            return
        if not PUBLISH_CHAT_ID:
            await query.message.reply_text("–¶—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ –∑–∞–¥–∞–Ω–∞. /dest here –∞–±–æ /dest <id>.")
            return
        # –¥–µ–ª–µ–≥—É—î–º–æ –Ω–∞ cmd_publish –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
        await cmd_publish(update, context)
        return
    if data == "na:edit":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó.")
            return
        idx = max(0, min(draft["cursor"], len(draft["items"]) - 1))
        draft["cursor"] = idx
        it = draft["items"][idx]
        await query.message.reply_text(
            f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É.\n–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è {idx + 1}/{len(draft['items'])}:\n"
            f"{it['title']}" + (f" ‚Äî {it['price']}" if it.get("price") else "") + (f" ‚Äî {it['note']}" if it.get("note") else ""),
            reply_markup=kb_edit(idx, len(draft["items"])),
        )
        return

    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è/–∑–º—ñ–Ω–∏
    if data in {"na:nav_prev", "na:nav_next", "na:up", "na:down", "na:del", "na:done"}:
        items = draft["items"]
        if not items:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        idx = draft["cursor"]

        if data == "na:nav_prev":
            idx = max(0, idx - 1)
            draft["cursor"] = idx
        elif data == "na:nav_next":
            idx = min(len(items) - 1, idx + 1)
            draft["cursor"] = idx
        elif data == "na:up" and idx > 0:
            items[idx - 1], items[idx] = items[idx], items[idx - 1]
            draft["cursor"] = idx - 1
        elif data == "na:down" and idx < len(items) - 1:
            items[idx + 1], items[idx] = items[idx], items[idx + 1]
            draft["cursor"] = idx + 1
        elif data == "na:del":
            removed = items.pop(idx)
            if idx >= len(items):
                idx = max(0, len(items) - 1)
            draft["cursor"] = idx
            await query.message.reply_text(
                f"–í–∏–¥–∞–ª–µ–Ω–æ: {removed['title']}\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(items)}",
                disable_web_page_preview=True,
            )
            if not items:
                await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb_main_admin())
                return
        elif data == "na:done":
            await query.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é.", reply_markup=kb_main_admin())
            return

        if items:
            it = items[draft["cursor"]]
            await query.message.reply_text(
                f"–ü–æ–∑–∏—Ü—ñ—è {draft['cursor'] + 1}/{len(items)}:\n"
                f"{it['title']}" + (f" ‚Äî {it['price']}" if it.get("price") else "") + (f" ‚Äî {it['note']}" if it.get("note") else ""),
                reply_markup=kb_edit(draft["cursor"], len(items)),
            )

# ---- –ê–¥–º—ñ–Ω: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ñ–æ—Ç–æ (–ø—ñ–¥–ø–∏—Å ‚Äî —è–∫ —É –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä—è–¥–∫–∞) ----
async def on_admin_photo_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    caption = update.message.caption or ""
    item = parse_item_line(caption)
    file_id = update.message.photo[-1].file_id if update.message.photo else ""
    item["photo_id"] = file_id
    draft = ensure_draft(update.effective_user.id)
    draft["items"].append(item)
    await update.effective_message.reply_text(
        "–î–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—é –∑ —Ñ–æ—Ç–æ.\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n" + render_items(draft["items"]),
        reply_markup=kb_main_admin(),
        disable_web_page_preview=True,
    )

# ---- –ê–¥–º—ñ–Ω: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–∫—Å—Ç–æ–º (–º–æ–∂–Ω–∞ –ø–∞—á–∫–æ—é) ----
async def on_admin_list_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    text = (update.message.text or "").strip()
    if not text:
        return
    draft = ensure_draft(update.effective_user.id)
    lines = [ln.strip() for ln in text.split("\n") if ln.strip()]
    for ln in lines:
        draft["items"].append(parse_item_line(ln))
    await update.effective_message.reply_text(
        f"–î–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ–π: {len(lines)}\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(draft['items'])}",
        reply_markup=kb_main_admin(),
        disable_web_page_preview=True,
    )

# ================================ MAIN ================================

def main() -> None:
    app: Application = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("whoami", whoami))
    app.add_handler(CommandHandler("dest", cmd_dest))

    # –ê–¥–º—ñ–Ω: callback-–∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    app.add_handler(CallbackQueryHandler(on_cb))

    # –ê–¥–º—ñ–Ω: –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–µ–ø–ª–∞—î–º –Ω–∞ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
    app.add_handler(MessageHandler(filters.REPLY & filters.User(list(ADMIN_IDS)), on_admin_reply))

    # –ê–¥–º—ñ–Ω: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ —Ñ–æ—Ç–æ (—á–µ—Ä–µ–∑ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ) ‚Äî –ü–ï–†–ï–î —Ç–µ–∫—Å—Ç–æ–≤–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    app.add_handler(MessageHandler(filters.PHOTO & filters.User(list(ADMIN_IDS)), on_admin_photo_item))

    # –ê–¥–º—ñ–Ω: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–∫—Å—Ç–æ–º (—Å—Ç–∞–≤–∏–º–æ –ü–ï–†–ï–î –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏)
    app.add_handler(MessageHandler(filters.TEXT & filters.User(list(ADMIN_IDS)) & ~filters.COMMAND, on_admin_list_text))

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_buttons))

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–µ–∫—Å—Ç –∞–±–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è), –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ ¬´–ø–∏—Ç–∞–Ω–Ω—è¬ª
    app.add_handler(MessageHandler((filters.TEXT | filters.ATTACHMENT) & ~filters.COMMAND, on_user_message))

    log.info("Bot started")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()


