# bot.py

import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class SendNews(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

class OperatorChat(StatesGroup):
    waiting_for_reply = State()

class OperatorQuestion(StatesGroup):
    waiting_for_choice = State()
    waiting_for_payment = State()

keyboard_main = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
        [types.KeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
        [types.KeyboardButton(text="–ù–æ–≤–∏–Ω–∫–∏")],
        [types.KeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")]
    ],
    resize_keyboard=True,
    is_persistent=True
)

inline_operator_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¢–¢–ù –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é", callback_data="request_ttn")],
        [InlineKeyboardButton(text="–ó–≤'—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
        [InlineKeyboardButton(text="–Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ –æ–ø–ª–∞—Ç—É", callback_data="sent_payment")],
        [InlineKeyboardButton(text="–ö–æ–ª–∏ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="delivery_time")],
        [InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")],
        [InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="change_address")],
        [InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
)

if not os.path.exists("users.txt"):
    with open("users.txt", "w"): pass

def save_user(user_id):
    with open("users.txt", "r+") as f:
        users = f.read().splitlines()
        if str(user_id) not in users:
            f.write(f"{user_id}\n")
            asyncio.create_task(bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫: {user_id}"))

def is_user_saved(user_id):
    with open("users.txt", "r") as f:
        return str(user_id) in f.read().splitlines()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    save_user(message.from_user.id)
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ –ó–∞–º–æ—Ä—Å—å–∫—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏! –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞:", reply_markup=keyboard_main)

@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(
        "/start ‚Äì –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n/help ‚Äì –Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç\n/sendnews ‚Äì –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–∑—Å–∏–ª–∫–∞)",
        reply_markup=keyboard_main
    )

@dp.message(F.text == "–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")
async def work_conditions(message: types.Message):
    await message.answer("–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ\nüí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\nüîÑ –û–±–º—ñ–Ω/–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤.", reply_markup=keyboard_main)

@dp.message(F.text == "–ù–æ–≤–∏–Ω–∫–∏")
async def new_arrivals(message: types.Message):
    await message.answer("–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∫–∏ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—É—Ç: https://zamorskiepodarki.com/", reply_markup=keyboard_main)

@dp.message(F.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
async def subscribe_user(message: types.Message):
    if is_user_saved(message.from_user.id):
        await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=keyboard_main)
    else:
        save_user(message.from_user.id)
        await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=keyboard_main)

@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def ask_operator(message: types.Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=inline_operator_keyboard)
    await state.set_state(OperatorQuestion.waiting_for_choice)

@dp.callback_query(F.data.startswith("request_"))
@dp.callback_query(F.data.startswith("contact_"))
@dp.callback_query(F.data.startswith("delivery_"))
@dp.callback_query(F.data.startswith("cancel_"))
@dp.callback_query(F.data.startswith("change_"))
async def handle_operator_queries(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action_texts = {
        "request_ttn": "–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¢–¢–ù",
        "contact_operator": "—Ö–æ—á–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
        "delivery_time": "–∑–∞–ø–∏—Ç—É—î —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
        "cancel_order": "—Ö–æ—á–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "change_address": "—Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"
    }
    action = callback.data
    if action == "back_to_menu":
        await callback.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=keyboard_main)
        await state.clear()
    else:
        text = action_texts.get(action, "–∑–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ö–ª—ñ—î–Ω—Ç {user_id} {text}.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]
                ]
            )
        )
        await callback.message.answer("–í–∞—à –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", reply_markup=keyboard_main)
        await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "sent_payment")
async def handle_sent_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.")
    await state.set_state(OperatorQuestion.waiting_for_payment)
    await callback.answer()

@dp.message(OperatorQuestion.waiting_for_payment, F.document)
async def receive_payment_proof(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    document = message.document.file_id
    await bot.send_document(
        chat_id=ADMIN_ID,
        document=document,
        caption=f"–ö–ª—ñ—î–Ω—Ç {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")]
            ]
        )
    )
    await message.answer("–í–∞—à —Ñ–∞–π–ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", reply_markup=keyboard_main)
    await state.clear()

@dp.callback_query(F.data.startswith("reply_"))
async def operator_reply_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await callback.message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:")
    await state.update_data(reply_to=user_id)
    await state.set_state(OperatorChat.waiting_for_reply)
    await callback.answer()

@dp.message(OperatorChat.waiting_for_reply)
async def send_operator_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reply_to = data.get("reply_to")
    if reply_to:
        await bot.send_message(chat_id=reply_to, text=message.text)
        await message.answer("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", reply_markup=keyboard_main)
    await state.clear()

@dp.message(Command('sendnews'))
async def cmd_sendnews(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
    await state.set_state(SendNews.waiting_for_photo)

@dp.message(SendNews.waiting_for_photo, F.photo)
async def get_news_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –ø—ñ–¥ —Ñ–æ—Ç–æ.")
    await state.set_state(SendNews.waiting_for_caption)

@dp.message(SendNews.waiting_for_caption)
async def get_news_caption(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photo_id = user_data.get("photo")
    user_text = message.text

    announcement = (
        "*–ù–æ–≤–∏–Ω–∫–∏ —É \"–ó–∞–º–æ—Ä—Å—å–∫–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫–∞—Ö\"!*\n\n"
        "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Å—É–≤–µ–Ω—ñ—Ä—ñ–≤, –∞—Ä–æ–º–∞—Ç—ñ–≤ —Ç–∞ –¥–µ–∫–æ—Ä—É.\n\n"
        "–ó–Ω–∏–∂–∫–∏ –Ω–∞ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
        "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.\n\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"
    )

    full_caption = announcement + user_text

    with open("users.txt", "r") as f:
        users = f.read().splitlines()

    if not users:
        await message.answer("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.", reply_markup=keyboard_main)
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", url="https://zamorskiepodarki.com/")]
        ]
    )

    count = 0
    for user_id in users:
        try:
            await bot.send_photo(
                chat_id=int(user_id),
                photo=photo_id,
                caption=full_caption,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            count += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", reply_markup=keyboard_main)
    await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# --- –ö—ñ–Ω–µ—Ü—å bot.py ---
