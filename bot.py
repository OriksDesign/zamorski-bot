# --- bot.py ---

from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import os

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class SendNews(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def save_user(user_id):
    if not os.path.exists("users.txt"):
        with open("users.txt", "w") as f:
            f.write("")
    with open("users.txt", "r+") as f:
        users = f.read().splitlines()
        if str(user_id) not in users:
            f.write(f"{user_id}\n")

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    save_user(message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
            [types.KeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
            [types.KeyboardButton(text="–ù–æ–≤–∏–Ω–∫–∏")],
            [types.KeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ –ó–∞–º–æ—Ä—Å—å–∫—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=keyboard)

@dp.message(F.text == "–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")
async def work_conditions(message: types.Message):
    await message.answer("–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ\nüí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\nüîÑ –û–±–º—ñ–Ω/–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤.")

@dp.message(F.text == "–ù–æ–≤–∏–Ω–∫–∏")
async def new_arrivals(message: types.Message):
    await message.answer("–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω—É —Ç—É—Ç: https://zamorskiepodarki.com/")

@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def ask_operator(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å.")

@dp.message(F.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
async def subscribe_newsletter(message: types.Message):
    save_user(message.from_user.id)
    await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É! ‚úÖ")

# –†–æ–∑—Å–∏–ª–∫–∞: –∫–æ–º–∞–Ω–¥–∞ /sendnews
@dp.message(Command('sendnews'))
async def cmd_sendnews(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
    await state.set_state(SendNews.waiting_for_photo)

@dp.message(SendNews.waiting_for_photo, F.photo)
async def get_news_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –ø—ñ–¥ —Ñ–æ—Ç–æ.")
    await state.set_state(SendNews.waiting_for_caption)

@dp.message(SendNews.waiting_for_caption)
async def get_news_caption(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photo_id = user_data.get("photo")
    user_text = message.text

    announcement = (
        "*–ù–æ–≤–∏–Ω–∫–∏ —É \"–ó–∞–º–æ—Ä—Å—å–∫–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫–∞—Ö\"!*\n\n"
        "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Å—É–≤–µ–Ω—ñ—Ä—ñ–≤, –∞—Ä–æ–º–∞—Ç—ñ–≤ —Ç–∞ –¥–µ–∫–æ—Ä—É.\n\n"
        "–ó–Ω–∏–∂–∫–∏ –Ω–∞ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
        "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.\n\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"
    )

    full_caption = announcement + user_text

    if not os.path.exists("users.txt"):
        await message.answer("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        await state.clear()
        return

    with open("users.txt", "r") as f:
        users = f.read().splitlines()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", url="https://zamorskiepodarki.com/")]
        ]
    )

    count = 0
    for user_id in users:
        try:
            await bot.send_photo(
                chat_id=int(user_id),
                photo=photo_id,
                caption=full_caption,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            count += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
