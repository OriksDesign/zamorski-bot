# bot.py

import os
import asyncio
import pymysql
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ pymysql
connection = pymysql.connect(
    host=os.getenv('DB_HOST'),
    user=os.getenv('DB_USER'),
    password=os.getenv('DB_PASSWORD'),
    database=os.getenv('DB_NAME'),
    charset='utf8mb4',
    cursorclass=pymysql.cursors.DictCursor
)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
with connection.cursor() as cursor:
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)
connection.commit()

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class SendNews(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

class OperatorQuestion(StatesGroup):
    waiting_for_choice = State()
    waiting_for_text = State()
    waiting_for_payment = State()

def get_main_keyboard(user_id):
    buttons = [
        [types.KeyboardButton(text="–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
        [types.KeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
        [types.KeyboardButton(text="–ù–æ–≤–∏–Ω–∫–∏")],
        [types.KeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([types.KeyboardButton(text="–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")])
    return types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        is_persistent=True
    )

def save_user(user_id):
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM subscribers WHERE user_id = %s", (user_id,))
        if not cursor.fetchone():
            cursor.execute("INSERT INTO subscribers (user_id) VALUES (%s)", (user_id,))
            connection.commit()
            asyncio.create_task(bot.send_message(ADMIN_ID, f"–ù–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫: {user_id}"))

def is_user_saved(user_id):
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM subscribers WHERE user_id = %s", (user_id,))
        return cursor.fetchone() is not None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user(message.from_user.id)
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ –ó–∞–º–æ—Ä—Å—å–∫—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏! –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞:", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("""
/start ‚Äì –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
/help ‚Äì –Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç
/sendnews ‚Äì –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–∑—Å–∏–ª–∫–∞)
""", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")
async def work_conditions(message: types.Message):
    await message.answer("–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ\nüí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\nüîÑ –û–±–º—ñ–Ω/–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤.", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "–ù–æ–≤–∏–Ω–∫–∏")
async def new_arrivals(message: types.Message):
    await message.answer("–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∫–∏ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—É—Ç: https://zamorskiepodarki.com/", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
async def subscribe_user(message: types.Message):
    if is_user_saved(message.from_user.id):
        await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=get_main_keyboard(message.from_user.id))
    else:
        save_user(message.from_user.id)
        await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É!", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def ask_operator(message: types.Message, state: FSMContext):
    buttons = [
        [types.KeyboardButton(text="üì¶ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¢–¢–ù –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é")],
        [types.KeyboardButton(text="üë©‚Äçüíº –ó–≤'—è–∑–æ–∫ —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")],
        [types.KeyboardButton(text="üí≥ –Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ –æ–ø–ª–∞—Ç—É")],
        [types.KeyboardButton(text="‚è∞ –ö–æ–ª–∏ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É")],
        [types.KeyboardButton(text="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
        [types.KeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
    ]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))
    await state.set_state(OperatorQuestion.waiting_for_choice)

@dp.message(OperatorQuestion.waiting_for_choice)
async def handle_operator_selection(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=get_main_keyboard(user_id))
        await state.clear()
        return

    elif text == "üí≥ –Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ –æ–ø–ª–∞—Ç—É":
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (—Å–∫—Ä—ñ–Ω—à–æ—Ç) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OperatorQuestion.waiting_for_payment)
        return

    elif text in ["üì¶ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¢–¢–ù –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é", "üë©‚Äçüíº –ó–≤'—è–∑–æ–∫ —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "‚è∞ –ö–æ–ª–∏ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É", "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üìù –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"]:
        await bot.send_message(ADMIN_ID, f"–ö–ª—ñ—î–Ω—Ç {user_id} –ø—Ä–æ—Å–∏—Ç—å: {text}")
        await message.answer("–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(user_id))
        await state.clear()

@dp.message(OperatorQuestion.waiting_for_payment, F.photo | F.document)
async def receive_operator_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(chat_id=ADMIN_ID, photo=file_id, caption=f"–§–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ {user_id}")
    elif message.document:
        file_id = message.document.file_id
        await bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=f"–§–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ {user_id}")
    await message.answer("–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_main_keyboard(user_id))
    await state.clear()

@dp.message(Command("sendnews"))
async def cmd_sendnews(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
    await state.set_state(SendNews.waiting_for_photo)

@dp.message(SendNews.waiting_for_photo, F.photo)
async def get_news_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –ø—ñ–¥ —Ñ–æ—Ç–æ.")
    await state.set_state(SendNews.waiting_for_caption)

@dp.message(SendNews.waiting_for_caption)
async def get_news_caption(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get("photo")
    text = message.text

    caption = (
        "*–ù–æ–≤–∏–Ω–∫–∏ —É \"–ó–∞–º–æ—Ä—Å—å–∫–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫–∞—Ö\"!*\n\n"
        "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö —Å—É–≤–µ–Ω—ñ—Ä—ñ–≤, –∞—Ä–æ–º–∞—Ç—ñ–≤ —Ç–∞ –¥–µ–∫–æ—Ä—É.\n\n"
        "–ó–Ω–∏–∂–∫–∏ –Ω–∞ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
        "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.\n\n"
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"
        + text
    )

    with connection.cursor() as cursor:
        cursor.execute("SELECT user_id FROM subscribers")
        users = cursor.fetchall()

    if not users:
        await message.answer("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.", reply_markup=get_main_keyboard(message.from_user.id))
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", url="https://zamorskiepodarki.com/")]
    ])

    count = 0
    for row in users:
        try:
            await bot.send_photo(chat_id=row['user_id'], photo=photo_id, caption=caption, parse_mode="Markdown", reply_markup=keyboard)
            count += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ {row['user_id']}: {e}")

    await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", reply_markup=get_main_keyboard(message.from_user.id))
    await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
