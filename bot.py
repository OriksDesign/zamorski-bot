# bot.py
# -*- coding: utf-8 -*-
# –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω—É ¬´–ó–∞–º–æ—Ä—Å—å–∫—ñ –ü–æ–¥–∞—Ä—É–Ω–∫–∏¬ª.
# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥—ñ—è–º–∏ (–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–æ–≤–∏–Ω–∫–∏, —É–º–æ–≤–∏).
# –ê–¥–º—ñ–Ω–∏: —Ä–µ–¥–∞–∫—Ç–æ—Ä ¬´–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª –∑ —Ä—É—á–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º —ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é.
# –ü–æ—Ç—Ä—ñ–±–Ω–æ: python-telegram-bot==21.4

from __future__ import annotations

import logging
import os
from typing import Dict, List, Any, Tuple

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)

# ============================ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ============================

def _env(name, *alts, default=None):
    for k in (name, *alts):
        v = os.getenv(k)
        if v:
            return v
    return default

TOKEN = _env("API_TOKEN", "TELEGRAM_TOKEN")
CHANNEL_ID = int(_env("CHANNEL_ID", "TARGET_CHAT_ID", "CHAT_ID", default="0"))
_admin_raw = _env("ADMIN_ID", "ADMIN_IDS", default="")
ADMIN_IDS = {int(x) for x in _admin_raw.replace(" ", "").split(",") if x}
NEW_ARRIVALS_URL = _env(
    "NEW_ARRIVALS_URL",
    default="https://zamorskiepodarki.com/uk/novoe-postuplenie/"
)

# –Ø–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –º–æ–∂–Ω–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–µ –ª–∏—à–µ —É CHANNEL_ID –∑ Render.
PUBLISH_CHAT_ID = CHANNEL_ID

missing = []
if not TOKEN:
    missing.append("API_TOKEN")
if not ADMIN_IDS:
    missing.append("ADMIN_ID")
if missing:
    raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω—ñ " + ", ".join(missing) + " —É Render.")

# ============================ –õ–û–ì–ï–†–ò ============================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("zamorski-bot")

# ============================ –°–¢–ê–ù–ò –¢–ê –°–•–û–í–ò–©–ê ============================

# –ß–µ—Ä–Ω–µ—Ç–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ (—Ä–µ–¥–∞–∫—Ç–æ—Ä ¬´–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª)
# draft = {"items": [{"title": str, "price": str, "note": str}], "cursor": int}
DRAFTS: Dict[int, Dict[str, Any]] = {}

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É¬ª —ñ —á–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø–∏—Ç–∞–Ω–Ω—è
WAITING_QUESTION: Dict[int, bool] = {}

# –ú–∞–ø–∞ —Ç—ñ–∫–µ—Ç—ñ–≤: (admin_id, message_id) -> user_id
# –ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–µ–ø–ª–∞—î–º –Ω–∞ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –º–∏ –∑–Ω–∞—î–º–æ, –∫–æ–º—É —Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
SUPPORT_THREADS: Dict[Tuple[int, int], int] = {}

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Ç—ñ–∫–µ—Ç—ñ–≤ (—É –ø–∞–º‚Äô—è—Ç—ñ)
THREAD_NO = 1

# ============================ –ö–û–†–ò–°–ù–Ü –§–£–ù–ö–¶–Ü–á ============================

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def ensure_draft(user_id: int) -> Dict[str, Any]:
    if user_id not in DRAFTS:
        DRAFTS[user_id] = {"items": [], "cursor": 0}
    return DRAFTS[user_id]

def parse_item_line(text: str) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏–º–æ —Ä—è–¥–æ–∫: '–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –ø–ª—é—Å' –∞–±–æ '–ù–∞–∑–≤–∞ - —Ü—ñ–Ω–∞' –∞–±–æ –ø—Ä–æ—Å—Ç–æ '–ù–∞–∑–≤–∞'."""
    for sep in ["‚Äî", "‚Äì", "  |  ", " | ", " - ", " ‚Äî ", " ‚Äì "]:
        text = text.replace(sep, "|")
    text = text.replace(" |", "|").replace("| ", "|").replace(" -", "|").replace("- ", "|")
    parts = [p.strip() for p in text.split("|") if p.strip()]
    title = parts[0] if parts else "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    price = parts[1] if len(parts) > 1 else ""
    note  = parts[2] if len(parts) > 2 else ""
    return {"title": title, "price": price, "note": note}

def render_items(items: List[Dict[str, str]]) -> str:
    if not items:
        return "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó."
    out = []
    for i, it in enumerate(items, 1):
        tail = []
        if it.get("price"):
            tail.append(it["price"])
        if it.get("note"):
            tail.append(it["note"])
        out.append(f"{i}) {it['title']}" + ((" ‚Äî " + " ‚Äî ".join(tail)) if tail else ""))
    return "\n".join(out)

def render_post(items: List[Dict[str, str]]) -> str:
    header = "–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è\n"
    link = f"–î–∏–≤–∏—Å—å –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏: {NEW_ARRIVALS_URL}\n"
    return f"{header}\n{link}\n{render_items(items)}"

def kb_main_admin() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é", callback_data="na:add_hint"),
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="na:clear_confirm"),
        ],
        [InlineKeyboardButton("üß≠ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", callback_data="na:edit")],
        [
            InlineKeyboardButton("üëÅ –ü–µ—Ä–µ–≥–ª—è–¥", callback_data="na:preview"),
            InlineKeyboardButton("üì£ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="na:publish"),
        ],
        [InlineKeyboardButton("üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª –Ω–æ–≤–∏–Ω–æ–∫", url=NEW_ARRIVALS_URL)],
    ]
    return InlineKeyboardMarkup(kb)

USER_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton("–ù–æ–≤–∏–Ω–∫–∏"), KeyboardButton("–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
    ],
    resize_keyboard=True
)

# ============================ –ö–û–ú–ê–ù–î–ò / –ú–ï–ù–Æ ============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –º–µ–Ω—é –≤—Å—ñ–º. –ê–¥–º—ñ–Ω –¥–æ–¥–∞—Ç–∫–æ–≤–æ –±–∞—á–∏—Ç—å –ø—ñ–¥–∫–∞–∑–∫—É –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏."""
    user = update.effective_user
    ensure_draft(user.id)

    greet = (
        "–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ ¬´–ó–∞–º–æ—Ä—Å—å–∫—ñ –ü–æ–¥–∞—Ä—É–Ω–∫–∏¬ª!\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É —á–∞—Ç."
    )
    if is_admin(user.id):
        greet += (
            "\n\n–†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ ¬´–ù–æ–≤–æ–≥–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ "
            "/new /list /clear /preview /publish –∞–±–æ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é."
        )

    await update.effective_message.reply_text(greet, reply_markup=USER_KB)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    txt = [
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:",
        "‚Ä¢ /start ‚Äî –º–µ–Ω—é",
        "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id",
        "‚Ä¢ /whoami ‚Äî –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—ñ–≤",
    ]
    if is_admin(update.effective_user.id):
        txt += [
            "",
            "–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ –¥–ª—è ¬´–ù–æ–≤–æ–≥–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª:",
            "‚Ä¢ /new ‚Äî –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫",
            "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
            "‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫",
            "‚Ä¢ /preview ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥",
            "‚Ä¢ /publish ‚Äî –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —É –∫–∞–Ω–∞–ª/—á–∞—Ç",
            "‚Ä¢ /dest ‚Äî –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü—ñ–ª–ª—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (here|env|<id>)",
        ]
    await update.effective_message.reply_text("\n".join(txt), reply_markup=USER_KB)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(f"chat_id: {update.effective_chat.id}")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "user_id: {}\nadmin_ids: {}\nCHANNEL_ID: {}\nPUBLISH_CHAT_ID: {}".format(
            update.effective_user.id, sorted(list(ADMIN_IDS)), CHANNEL_ID, PUBLISH_CHAT_ID
        )
    )

# ---------- –ê–¥–º—ñ–Ω: –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ü—ñ–ª–ª—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó ----------
async def cmd_dest(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    global PUBLISH_CHAT_ID
    args = context.args or []

    if not args:
        await update.effective_message.reply_text(
            "–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {}\n\n–í–∞—Ä—ñ–∞–Ω—Ç–∏:\n"
            "/dest here ‚Äî –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —É –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "/dest env ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CHANNEL_ID –∑ Render\n"
            "/dest <id> ‚Äî –∑–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π chat_id (—á–∏—Å–ª–æ–º)".format(
                PUBLISH_CHAT_ID or "–Ω–µ –∑–∞–¥–∞–Ω–æ"
            )
        )
        return

    arg = args[0].lower()
    if arg == "here":
        PUBLISH_CHAT_ID = update.effective_chat.id
        await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ü—É–±–ª—ñ–∫—É—î–º–æ —Å—é–¥–∏: {PUBLISH_CHAT_ID}")
    elif arg == "env":
        PUBLISH_CHAT_ID = CHANNEL_ID
        await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–∞ CHANNEL_ID: {PUBLISH_CHAT_ID}")
    else:
        try:
            PUBLISH_CHAT_ID = int(arg)
            await update.effective_message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–∞ —Ü—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {PUBLISH_CHAT_ID}")
        except ValueError:
            await update.effective_message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ id. –ü—Ä–∏–∫–ª–∞–¥: /dest -1001234567890")

# ============================ –ö–û–†–ò–°–¢–£–í–ê–ß: –ö–ù–û–ü–ö–ò ============================

async def handle_user_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∑ —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."""
    user = update.effective_user
    text = (update.message.text or "").strip().lower()

    if text == "–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É":
        WAITING_QUESTION[user.id] = True
        await update.effective_message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª –∑ –ø—ñ–¥–ø–∏—Å–æ–º) ‚Äî —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.",
            reply_markup=USER_KB
        )
        return

    if text == "–Ω–æ–≤–∏–Ω–∫–∏":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç", url=NEW_ARRIVALS_URL)]
        ])
        await update.effective_message.reply_text(
            "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–º–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è–º–∏ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ:",
            reply_markup=kb
        )
        return

    if text == "—É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ":
        await update.effective_message.reply_text(
            "–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\n"
            "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –£–∫—Ä–∞—ó–Ω–æ—é ‚Äî –ù–æ–≤–∞ –ü–æ—à—Ç–∞\n"
            "‚Ä¢ –û–ø–ª–∞—Ç–∞ ‚Äî –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n"
            "‚Ä¢ –£ —Ä–∞–∑—ñ –±—Ä–∞–∫—É ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ; –º–æ–∂–ª–∏–≤–∏–π –æ–±–º—ñ–Ω –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤\n"
            "–ü–∏—Ç–∞–Ω–Ω—è? –û–±–µ—Ä—ñ—Ç—å ¬´–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É¬ª —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º.",
            reply_markup=USER_KB
        )
        return

# ============================ –°–ê–ü–û–†–¢: –ü–ò–¢–ê–ù–ù–Ø/–í–Ü–î–ü–û–í–Ü–î–Ü ============================

async def _notify_admins_about_question(update: Update, context: ContextTypes.DEFAULT_TYPE, header_text: str):
    """–†–æ–∑—Å–∏–ª–∞—î–º–æ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø—ñ–Ω–≥ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."""
    global SUPPORT_THREADS
    for admin_id in ADMIN_IDS:
        # –°–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä–µ–ø–ª–∞—î–º
        header = await context.bot.send_message(
            admin_id,
            header_text + "\n\n–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É: –ø—Ä–æ—Å—Ç–æ –∑—Ä–æ–±—ñ—Ç—å ¬´Reply¬ª –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
        )
        SUPPORT_THREADS[(admin_id, header.message_id)] = update.effective_user.id

        # –ö–æ–ø—ñ—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (—è–∫—â–æ —Ü–µ –Ω–µ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç)
        if update.message and (update.message.photo or update.message.document or update.message.video or update.message.voice):
            copied = await context.bot.copy_message(
                chat_id=admin_id,
                from_chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
            SUPPORT_THREADS[(admin_id, copied.message_id)] = update.effective_user.id
        elif update.message and update.message.text:
            body = "–¢–µ–∫—Å—Ç: " + update.message.text
            body_msg = await context.bot.send_message(admin_id, body)
            SUPPORT_THREADS[(admin_id, body_msg.message_id)] = update.effective_user.id

async def on_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞–º."""
    user_id = update.effective_user.id
    if not WAITING_QUESTION.get(user_id):
        return  # —ñ–Ω—à—ñ —Ç–µ–∫—Å—Ç–∏ –ª–æ–≤–∏—Ç—å handle_user_buttons –∞–±–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ

    WAITING_QUESTION[user_id] = False
    global THREAD_NO
    thread = THREAD_NO
    THREAD_NO += 1

    header = f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}\nThread #{thread}"
    await _notify_admins_about_question(update, context, header)

    await update.effective_message.reply_text(
        "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
        reply_markup=USER_KB
    )

async def on_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–≤ —Ä–µ–ø–ª–∞—î–º –Ω–∞ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—à–ª–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    if not is_admin(update.effective_user.id):
        return
    reply = update.message.reply_to_message
    if not reply:
        return

    key = (update.effective_user.id, reply.message_id)
    user_id = SUPPORT_THREADS.get(key)
    if not user_id:
        return

    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –∫–æ–ø—ñ—é
    await context.bot.copy_message(
        chat_id=user_id,
        from_chat_id=update.effective_chat.id,
        message_id=update.message.message_id
    )
    await update.effective_message.reply_text("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ‚úÖ")

# ============================ –ê–î–ú–Ü–ù: –ù–û–í–ï –ù–ê–î–•–û–î–ñ–ï–ù–ù–Ø ============================

async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    DRAFTS[update.effective_user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω–æ–∫.", reply_markup=kb_main_admin())

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    draft = ensure_draft(update.effective_user.id)
    await update.effective_message.reply_text(render_items(draft["items"]), disable_web_page_preview=True)

async def cmd_clear(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    DRAFTS[update.effective_user.id] = {"items": [], "cursor": 0}
    await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.", reply_markup=kb_main_admin())

async def cmd_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return
    draft = ensure_draft(update.effective_user.id)
    await update.effective_message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)

async def cmd_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        return

    if not PUBLISH_CHAT_ID:
        await update.effective_message.reply_text(
            "–¶—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ –∑–∞–¥–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /dest here –∞–±–æ /dest <id>."
        )
        return

    draft = ensure_draft(update.effective_user.id)
    if not draft["items"]:
        await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é.")
        return

    await context.bot.send_message(PUBLISH_CHAT_ID, render_post(draft["items"]), disable_web_page_preview=False)
    await update.effective_message.reply_text("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=kb_main_admin())

def kb_edit(cursor: int, total: int) -> InlineKeyboardMarkup:
    left_disabled = cursor <= 0
    right_disabled = cursor >= (total - 1)
    btn_prev = InlineKeyboardButton("‚óÄ", callback_data="na:nav_prev" if not left_disabled else "na:nop")
    btn_next = InlineKeyboardButton("‚ñ∂", callback_data="na:nav_next" if not right_disabled else "na:nop")
    kb = [
        [btn_prev, InlineKeyboardButton(f"–ü–æ–∑–∏—Ü—ñ—è {cursor + 1} –∑ {total}", callback_data="na:nop"), btn_next],
        [
            InlineKeyboardButton("‚¨ÜÔ∏è –í–∏—â–µ", callback_data="na:up"),
            InlineKeyboardButton("‚¨áÔ∏è –ù–∏–∂—á–µ", callback_data="na:down"),
            InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="na:del"),
        ],
        [InlineKeyboardButton("üîô –ì–æ—Ç–æ–≤–æ", callback_data="na:done")],
    ]
    return InlineKeyboardMarkup(kb)

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
    query = update.callback_query
    user = update.effective_user
    if not is_admin(user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    await query.answer()
    draft = ensure_draft(user.id)
    data = query.data or "na:nop"

    if data == "na:nop":
        return

    if data == "na:add_hint":
        await query.message.reply_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º:\n"
            "–ù–∞–∑–≤–∞ | –¶—ñ–Ω–∞ | –ø–ª—é—Å\n\n"
            "–ú–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –≤—ñ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ ‚Äî –∫–æ–∂–µ–Ω —Å—Ç–∞–Ω–µ –æ–∫—Ä–µ–º–æ—é –ø–æ–∑–∏—Ü—ñ—î—é."
        )
        return

    if data == "na:clear_confirm":
        DRAFTS[user.id] = {"items": [], "cursor": 0}
        await query.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.", reply_markup=kb_main_admin())
        return

    if data == "na:preview":
        await query.message.reply_text(render_post(draft["items"]), disable_web_page_preview=False)
        return

    if data == "na:publish":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é.")
            return
        if not PUBLISH_CHAT_ID:
            await query.message.reply_text("–¶—ñ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–µ –∑–∞–¥–∞–Ω–∞. /dest here –∞–±–æ /dest <id>.")
            return
        await context.bot.send_message(PUBLISH_CHAT_ID, render_post(draft["items"]), disable_web_page_preview=False)
        await query.message.reply_text("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=kb_main_admin())
        return

    if data == "na:edit":
        if not draft["items"]:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó.")
            return
        idx = max(0, min(draft["cursor"], len(draft["items"]) - 1))
        draft["cursor"] = idx
        it = draft["items"][idx]
        await query.message.reply_text(
            f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É.\n–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è {idx + 1}/{len(draft['items'])}:\n"
            f"{it['title']}" + (f" ‚Äî {it['price']}" if it.get("price") else "") + (f" ‚Äî {it['note']}" if it.get("note") else ""),
            reply_markup=kb_edit(idx, len(draft["items"])),
        )
        return

    if data in {"na:nav_prev", "na:nav_next", "na:up", "na:down", "na:del", "na:done"}:
        items = draft["items"]
        if not items:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        idx = draft["cursor"]

        if data == "na:nav_prev":
            idx = max(0, idx - 1)
            draft["cursor"] = idx
        elif data == "na:nav_next":
            idx = min(len(items) - 1, idx + 1)
            draft["cursor"] = idx
        elif data == "na:up" and idx > 0:
            items[idx - 1], items[idx] = items[idx], items[idx - 1]
            idx -= 1
            draft["cursor"] = idx
        elif data == "na:down" and idx < len(items) - 1:
            items[idx + 1], items[idx] = items[idx], items[idx + 1]
            idx += 1
            draft["cursor"] = idx
        elif data == "na:del":
            removed = items.pop(idx)
            if idx >= len(items):
                idx = max(0, len(items) - 1)
            draft["cursor"] = idx
            await query.message.reply_text(
                f"–í–∏–¥–∞–ª–µ–Ω–æ: {removed['title']}\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(items)}",
                disable_web_page_preview=True,
            )
            if not items:
                await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb_main_admin())
                return
        elif data == "na:done":
            await query.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é.", reply_markup=kb_main_admin())
            return

        if items:
            it = items[draft["cursor"]]
            await query.message.reply_text(
                f"–ü–æ–∑–∏—Ü—ñ—è {draft['cursor'] + 1}/{len(items)}:\n"
                f"{it['title']}" + (f" ‚Äî {it['price']}" if it.get("price") else "") + (f" ‚Äî {it['note']}" if it.get("note") else ""),
                reply_markup=kb_edit(draft["cursor"], len(items)),
            )

# ============================ –•–ï–ù–î–õ–ï–†–ò –î–û–î–ê–í–ê–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô ============================

async def on_any_text_for_admin_lists(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ä—è–¥–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω–æ–∫ (–º–æ–∂–Ω–∞ –ø–∞—á–∫–æ—é)."""
    if not is_admin(update.effective_user.id):
        return
    text = (update.message.text or "").strip()
    if not text:
        return
    draft = ensure_draft(update.effective_user.id)
    lines = [ln.strip() for ln in text.split("\n") if ln.strip()]
    for ln in lines:
        draft["items"].append(parse_item_line(ln))
    await update.effective_message.reply_text(
        f"–î–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ–π: {len(lines)}\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n{render_items(draft['items'])}",
        reply_markup=kb_main_admin(),
        disable_web_page_preview=True,
    )

# ============================ MAIN ============================

def main() -> None:
    app: Application = ApplicationBuilder().token(TOKEN).build()

    # –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("whoami", whoami))

    # –ê–¥–º—ñ–Ω: –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ü–µ–º –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    app.add_handler(CommandHandler("dest", cmd_dest))

    # –ê–¥–º—ñ–Ω: —Ä–µ–¥–∞–∫—Ç–æ—Ä ¬´–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è¬ª
    app.add_handler(CommandHandler("new", cmd_new))
    app.add_handler(CommandHandler("list", cmd_list))
    app.add_handler(CommandHandler("clear", cmd_clear))
    app.add_handler(CommandHandler("preview", cmd_preview))
    app.add_handler(CommandHandler("publish", cmd_publish))
    app.add_handler(CallbackQueryHandler(on_cb))

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–Ω–æ–ø–∫–∏ (—Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_buttons))

    # –°–∞–ø–æ—Ä—Ç: –æ—á—ñ–∫—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±—É–¥—å-—è–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç)
    app.add_handler(MessageHandler(
        (filters.TEXT | filters.PHOTO | filters.DOCUMENT | filters.VIDEO | filters.VOICE) & ~filters.COMMAND,
        on_user_message
    ))

    # –ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–µ–ø–ª–∞—î–º –Ω–∞ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—à–ª–µ–º–æ –∫–ª—ñ—î–Ω—Ç—É
    app.add_handler(MessageHandler(filters.REPLY & filters.User(list(ADMIN_IDS)), on_admin_reply))

    # –¢–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω–æ–∫ (–∞–¥–º—ñ–Ω), —è–∫—â–æ —Ü–µ –Ω–µ –∫–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞ —ñ –Ω–µ —Å–∞–ø–æ—Ä—Ç
    app.add_handler(MessageHandler(filters.TEXT & filters.User(list(ADMIN_IDS)) & ~filters.COMMAND, on_any_text_for_admin_lists))

    log.info("Bot started")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
