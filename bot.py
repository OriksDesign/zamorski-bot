import os
import re
import asyncio
import logging
from typing import Optional, List
from collections import defaultdict

import pymysql
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ForceReply,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter, TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode


# ============================== –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===============================

API_TOKEN = os.getenv("API_TOKEN", "").strip()
NEW_ARRIVALS_URL = os.getenv(
    "NEW_ARRIVALS_URL", "https://zamorskiepodarki.com/uk/novoe-postuplenie/"
).strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # -100... –∞–±–æ @channel

# –ê–¥–º—ñ–Ω–∏ (–æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞)
ADMIN_IDS: set[int] = set()
_single = os.getenv("ADMIN_ID", "").strip()
if _single:
    try:
        ADMIN_IDS.add(int(_single))
    except ValueError:
        pass
for p in os.getenv("ADMIN_IDS", "").split(","):
    p = p.strip()
    if p:
        try:
            ADMIN_IDS.add(int(p))
        except ValueError:
            pass

ADMIN_ID_PRIMARY: Optional[int] = None
if _single:
    try:
        ADMIN_ID_PRIMARY = int(_single)
    except Exception:
        ADMIN_ID_PRIMARY = None
if ADMIN_ID_PRIMARY is None and ADMIN_IDS:
    ADMIN_ID_PRIMARY = min(ADMIN_IDS)

if not API_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ API_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
if not ADMIN_IDS:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ ADMIN_ID –∞–±–æ ADMIN_IDS —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
logger = logging.getLogger("zamorski-bot")

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS


# ====================== –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL –∑ –∞–≤—Ç–æ–ø—ñ–Ω–≥–æ–º ===================

class MySQL:
    def __init__(self):
        self.host = os.getenv("DB_HOST")
        self.user = os.getenv("DB_USER")
        self.password = os.getenv("DB_PASSWORD")
        self.database = os.getenv("DB_NAME")
        self.conn: Optional[pymysql.connections.Connection] = None
        self.connect()

    def connect(self):
        self.conn = pymysql.connect(
            host=self.host,
            user=self.user,
            password=self.password,
            database=self.database,
            charset="utf8mb4",
            autocommit=True,
            cursorclass=pymysql.cursors.DictCursor,
            connect_timeout=10,
            read_timeout=20,
            write_timeout=20,
        )
        logger.info("‚úÖ MySQL connected")

    def cursor(self):
        if self.conn is None or not self.conn.open:
            self.connect()
        else:
            try:
                self.conn.ping(reconnect=True)
            except Exception:
                self.connect()
        return self.conn.cursor()

    def close(self):
        try:
            if self.conn:
                self.conn.close()
                logger.info("‚úÖ MySQL connection closed")
        except Exception as e:
            logger.warning(f"Close MySQL failed: {e}")


db = MySQL()

# –¢–∞–±–ª–∏—Ü—ñ
with db.cursor() as cur:
    cur.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
          user_id BIGINT PRIMARY KEY,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS operator_threads (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id BIGINT NOT NULL,
          question TEXT NOT NULL,
          admin_message_id BIGINT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    """)


# =============================== –•–µ–ª–ø–µ—Ä–∏ –ë–î ================================

def add_subscriber(user_id: int) -> None:
    with db.cursor() as cur:
        cur.execute(
            "INSERT INTO subscribers (user_id) VALUES (%s) "
            "ON DUPLICATE KEY UPDATE user_id=user_id",
            (user_id,),
        )

def get_all_subscribers() -> List[int]:
    with db.cursor() as cur:
        cur.execute("SELECT user_id FROM subscribers ORDER BY created_at DESC")
        return [row["user_id"] for row in cur.fetchall()]

def remove_subscriber(user_id: int) -> None:
    with db.cursor() as cur:
        cur.execute("DELETE FROM subscribers WHERE user_id=%s", (user_id,))


# ================================ FSM —Å—Ç–∞–Ω–∏ ================================

class OperatorQuestion(StatesGroup):
    waiting_text = State()

class TTNRequest(StatesGroup):
    waiting_name = State()
    waiting_order = State()

class BillRequest(StatesGroup):
    waiting_name = State()
    waiting_order = State()

class NewArrivals(StatesGroup):
    waiting_item = State()
    waiting_order = State()


# ============================ –ë–æ—Ç —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ==============================

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞–º'—è—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (–ø–æ –∫–æ–∂–Ω–æ–º—É –∞–¥–º—ñ–Ω—É)
na_lists: dict[int, List[str]] = defaultdict(list)


# --------------------------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ------------------------------------

def user_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")],
            [KeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")],
            [KeyboardButton(text="–ù–æ–≤—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è")],
            [KeyboardButton(text="–ó–∞–ø–∏—Ç–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
            [KeyboardButton(text="–ó–∞–ø–∏—Ç–∞—Ç–∏ –¢–¢–ù –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def admin_kb() -> ReplyKeyboardRemove:
    # –ê–¥–º—ñ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ö–æ–≤–∞—î–º–æ ‚Äî –≤—Å–µ —Ä–æ–±–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ reply/–∫–Ω–æ–ø–∫–∏
    return ReplyKeyboardRemove()

def main_kb(user_id: int):
    return admin_kb() if is_admin(user_id) else user_kb()

def tracking_kb(ttn: str) -> InlineKeyboardMarkup:
    url = f"https://tracking.novaposhta.ua/#/uk/parcel/tracking/{ttn}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –¢–¢–ù", url=url)]
    ])

def na_render(admin_id: int) -> str:
    items = na_lists[admin_id]
    lines = ["–ù–æ–≤–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "", "–î–∏–≤—ñ—Ç—å—Å—è –≤—Å—ñ –Ω–æ–≤–∏–Ω–∫–∏:", NEW_ARRIVALS_URL, ""]
    for i, item in enumerate(items, 1):
        lines.append(f"{i}) {item}")
    return "\n".join(lines).strip()

def na_kb(admin_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é", callback_data="na:add"),
         InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="na:clear")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫", callback_data="na:reorder")],
        [InlineKeyboardButton("üëÅ –ü–µ—Ä–µ–≥–ª—è–¥", callback_data="na:preview"),
         InlineKeyboardButton("üöÄ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="na:publish")],
        [InlineKeyboardButton("üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª –Ω–æ–≤–∏–Ω–æ–∫", url=NEW_ARRIVALS_URL)],
    ])

def extract_ttn(text: Optional[str]) -> Optional[str]:
    if not text:
        return None
    m = re.search(r"\b\d{14}\b", text)
    return m.group(0) if m else None


# ========================= –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏ ============================

@dp.message(CommandStart())
async def start(message: types.Message):
    add_subscriber(message.from_user.id)
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥–∞–∑–∏–Ω—ñ –ó–∞–º–æ—Ä—Å—å–∫—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ.",
        reply_markup=main_kb(message.from_user.id),
    )

@dp.message(Command("menu"))
async def menu(message: types.Message):
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_kb(message.from_user.id))

@dp.message(Command("whoami"))
async def whoami(message: types.Message):
    status = "—Ç–∞–∫" if is_admin(message.from_user.id) else "–Ω—ñ"
    await message.answer(
        f"–í–∞—à user_id: <code>{message.from_user.id}</code>\n–ê–¥–º—ñ–Ω: {status}",
        reply_markup=main_kb(message.from_user.id),
    )

@dp.message(F.text == "–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")
async def terms(message: types.Message):
    text = (
        "–ù–∞—à—ñ —É–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:\n"
        "- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ —Å–ª—É–∂–±–æ—é –ù–æ–≤–∞ –ø–æ—à—Ç–∞\n"
        "- –û–ø–ª–∞—Ç–∞: –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ –∞–±–æ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n"
        "- –£ —Ä–∞–∑—ñ –≤–∏—è–≤–ª–µ–Ω–Ω—è –±—Ä–∞–∫—É ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ; –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –æ–±–º—ñ–Ω –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤\n"
        "–Ø–∫—â–æ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\""
    )
    await message.answer(text, reply_markup=main_kb(message.from_user.id))


# ---- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –ù–æ–≤—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è (–ø–æ—Å–∏–ª–∞–Ω–Ω—è) ----
@dp.message(F.text.in_({"–ù–æ–≤—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "–ù–æ–≤–∏–Ω–∫–∏"}))
async def new_arrivals(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª –Ω–æ–≤–∏–Ω–æ–∫", url=NEW_ARRIVALS_URL)]]
    )
    await message.answer("–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–º–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è–º–∏ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ.", reply_markup=kb)


# ------------------------- –ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É -------------------------------

@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def ask_operator_generic(message: types.Message, state: FSMContext):
    await state.update_data(topic="–ó–∞–≥–∞–ª—å–Ω–µ")
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")
    await state.set_state(OperatorQuestion.waiting_text)

@dp.message(OperatorQuestion.waiting_text)
async def got_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text or ""
    data = await state.get_data()
    topic = data.get("topic", "–ó–∞–≥–∞–ª—å–Ω–µ")

    with db.cursor() as cur:
        cur.execute(
            "INSERT INTO operator_threads (user_id, question) VALUES (%s, %s)",
            (user_id, f"[–¢–µ–º–∞: {topic}]\n{text}"),
        )
        thread_id = cur.lastrowid

    note = (
        f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code>\n"
        f"–¢–µ–º–∞: <b>{topic}</b>\n"
        f"Thread #{thread_id}\n\n{text}"
    )
    sent = await bot.send_message(
        ADMIN_ID_PRIMARY,
        note,
        reply_markup=ForceReply(input_field_placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É‚Ä¶"),
    )

    with db.cursor() as cur:
        cur.execute(
            "UPDATE operator_threads SET admin_message_id=%s WHERE id=%s",
            (sent.message_id, thread_id),
        )

    await message.answer(
        "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
        reply_markup=user_kb(),
    )
    await state.clear()


# --------------------- –ó–∞–ø–∏—Ç –¢–¢–ù (–ü–Ü–ë -> ‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è) ---------------------

@dp.message(F.text == "–ó–∞–ø–∏—Ç–∞—Ç–∏ –¢–¢–ù –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏")
async def ttn_start(message: types.Message, state: FSMContext):
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (—è–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ).")
    await state.set_state(TTNRequest.waiting_name)

@dp.message(TTNRequest.waiting_name)
async def ttn_got_name(message: types.Message, state: FSMContext):
    await state.update_data(ttn_name=message.text.strip())
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    await state.set_state(TTNRequest.waiting_order)

@dp.message(TTNRequest.waiting_order)
async def ttn_got_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    name = data.get("ttn_name", "-")
    order_no = message.text.strip()

    with db.cursor() as cur:
        cur.execute(
            "INSERT INTO operator_threads (user_id, question) VALUES (%s, %s)",
            (user_id, f"[TTN]\n–ü–Ü–ë: {name}\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_no}"),
        )
        thread_id = cur.lastrowid

    note = (
        f"–ó–∞–ø–∏—Ç –¢–¢–ù –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code>\n"
        f"–ü–Ü–ë: <b>{name}</b>\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>{order_no}</b>\n"
        f"Thread #{thread_id}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù (14 —Ü–∏—Ñ—Ä) –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º."
    )
    sent = await bot.send_message(
        ADMIN_ID_PRIMARY,
        note,
        reply_markup=ForceReply(input_field_placeholder="–í–≤–µ–¥—ñ—Ç—å –¢–¢–ù –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å‚Ä¶"),
    )

    with db.cursor() as cur:
        cur.execute(
            "UPDATE operator_threads SET admin_message_id=%s WHERE id=%s",
            (sent.message_id, thread_id),
        )

    await message.answer("–î—è–∫—É—î–º–æ! –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –¢–¢–ù —ñ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
                         reply_markup=user_kb())
    await state.clear()


# -------- –ó–∞–ø–∏—Ç —Ä–∞—Ö—É–Ω–∫—É (–ü–Ü–ë -> ‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è; –±–µ–∑ —à–∞–±–ª–æ–Ω—ñ–≤) ----------------

@dp.message(F.text == "–ó–∞–ø–∏—Ç–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def bill_start(message: types.Message, state: FSMContext):
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë –ø–ª–∞—Ç–Ω–∏–∫–∞ (—è–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ).")
    await state.set_state(BillRequest.waiting_name)

@dp.message(BillRequest.waiting_name)
async def bill_got_name(message: types.Message, state: FSMContext):
    await state.update_data(bill_name=message.text.strip())
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    await state.set_state(BillRequest.waiting_order)

@dp.message(BillRequest.waiting_order)
async def bill_got_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    name = data.get("bill_name", "-")
    order_no = message.text.strip()

    with db.cursor() as cur:
        cur.execute(
            "INSERT INTO operator_threads (user_id, question) VALUES (%s, %s)",
            (user_id, f"[BILL]\n–ü–Ü–ë: {name}\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_no}"),
        )
        thread_id = cur.lastrowid

    note = (
        f"–ó–∞–ø–∏—Ç –†–ê–•–£–ù–ö–£ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code>\n"
        f"–ü–Ü–ë: <b>{name}</b>\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>{order_no}</b>\n"
        f"Thread #{thread_id}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏/—Ä–∞—Ö—É–Ω–∫–æ–º —É —Ü—å–æ–º—É Reply."
    )
    sent = await bot.send_message(
        ADMIN_ID_PRIMARY,
        note,
        reply_markup=ForceReply(input_field_placeholder="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏/—Ä–∞—Ö—É–Ω–æ–∫‚Ä¶"),
    )

    with db.cursor() as cur:
        cur.execute(
            "UPDATE operator_threads SET admin_message_id=%s WHERE id=%s",
            (sent.message_id, thread_id),
        )

    await message.answer("–î—è–∫—É—î–º–æ! –ù–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏.",
                         reply_markup=user_kb())
    await state.clear()


# ------------------------- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω–æ–∫ (–∞–¥–º—ñ–Ω) ---------------------

@dp.message(Command("novinki", "builder", "newpost"))
async def na_open(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    uid = message.from_user.id
    await message.answer(
        f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω–æ–∫.\n–£ —Å–ø–∏—Å–∫—É: {len(na_lists[uid])} –ø–æ–∑–∏—Ü—ñ–π.",
        reply_markup=na_kb(uid),
    )

@dp.callback_query(F.data.startswith("na:"))
async def na_callbacks(cb: types.CallbackQuery, state: FSMContext):
    if not is_admin(cb.from_user.id):
        await cb.answer("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤", show_alert=True); return

    uid = cb.from_user.id
    action = cb.data.split(":")[1]

    if action == "add":
        await cb.message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ü—ñ—ó (–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º).",
            reply_markup=ForceReply(input_field_placeholder="–¢–µ–∫—Å—Ç –ø–æ–∑–∏—Ü—ñ—ó‚Ä¶"),
        )
        await state.set_state(NewArrivals.waiting_item)
        await cb.answer(); return

    if action == "clear":
        na_lists[uid].clear()
        await cb.message.answer("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.")
        await cb.message.answer(
            f"–£ —Å–ø–∏—Å–∫—É: {len(na_lists[uid])} –ø–æ–∑–∏—Ü—ñ–π.", reply_markup=na_kb(uid)
        )
        await cb.answer(); return

    if action == "reorder":
        if not na_lists[uid]:
            await cb.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True); return
        await cb.message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤, –Ω–∞–ø—Ä.: 2 1 3 4",
            reply_markup=ForceReply(input_field_placeholder="–ü–æ—Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä. 2 1 3 4)"),
        )
        await state.set_state(NewArrivals.waiting_order)
        await cb.answer(); return

    if action == "preview":
        if not na_lists[uid]:
            await cb.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True); return
        await cb.message.answer(na_render(uid))
        await cb.answer("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥"); return

    if action == "publish":
        if not na_lists[uid]:
            await cb.answer("–ù–µ–º–∞—î —â–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", show_alert=True); return
        text = na_render(uid)
        try:
            if CHANNEL_ID:
                await bot.send_message(CHANNEL_ID, text)
            else:
                await cb.message.answer(text)  # —è–∫—â–æ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π
            await cb.answer("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")
            na_lists[uid].clear()
            await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ.")
        except Exception as e:
            await cb.answer("–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó", show_alert=True)
            await cb.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        return

@dp.message(NewArrivals.waiting_item)
async def na_add_item(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear(); return
    uid = message.from_user.id
    txt = (message.text or "").strip()
    if not txt:
        await message.reply("–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    else:
        na_lists[uid].append(txt)
        await message.reply(f"–î–æ–¥–∞–Ω–æ ‚úÖ (—É—Å—å–æ–≥–æ: {len(na_lists[uid])})")
    await message.answer(
        f"–£ —Å–ø–∏—Å–∫—É: {len(na_lists[uid])} –ø–æ–∑–∏—Ü—ñ–π.",
        reply_markup=na_kb(uid),
    )
    await state.clear()

@dp.message(NewArrivals.waiting_order)
async def na_set_order(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear(); return
    uid = message.from_user.id
    raw = (message.text or "").replace(",", " ")
    try:
        order = [int(x) for x in raw.split() if x.isdigit()]
        items = na_lists[uid]
        if len(order) != len(items) or sorted(order) != list(range(1, len(items)+1)):
            raise ValueError
        na_lists[uid] = [items[i-1] for i in order]
        await message.reply("–ü–æ—Ä—è–¥–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: 2 1 3 4")
    await message.answer(
        f"–£ —Å–ø–∏—Å–∫—É: {len(na_lists[uid])} –ø–æ–∑–∏—Ü—ñ–π.",
        reply_markup=na_kb(uid),
    )
    await state.clear()


# ---------------------------- –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ -----------------------------

@dp.message()
async def admin_router(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    # –†–µ–ø–ª–∞–π –Ω–∞ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    if message.reply_to_message and message.reply_to_message.message_id:
        admin_msg_id = message.reply_to_message.message_id
        with db.cursor() as cur:
            cur.execute(
                "SELECT user_id FROM operator_threads "
                "WHERE admin_message_id=%s ORDER BY id DESC LIMIT 1",
                (admin_msg_id,),
            )
            row = cur.fetchone()
        if row:
            uid = int(row["user_id"])
            try:
                ttn = extract_ttn(message.text or message.caption or "")
                if ttn:
                    await bot.send_message(uid, f"–í–∞—à–∞ –¢–¢–ù –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏: <code>{ttn}</code>",
                                           reply_markup=tracking_kb(ttn))
                    await bot.send_message(uid, "–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º üòä",
                                           reply_markup=user_kb())
                else:
                    if message.photo:
                        await bot.send_photo(uid, message.photo[-1].file_id,
                                             caption=message.caption or "",
                                             reply_markup=user_kb())
                    else:
                        await bot.send_message(uid, message.text or "", reply_markup=user_kb())
                await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
                return
            except TelegramForbiddenError:
                await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            except Exception as e:
                await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
                return

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: /reply <user_id> <—Ç–µ–∫—Å—Ç/–¢–¢–ù>
    if message.text and message.text.startswith("/reply"):
        parts = message.text.split(maxsplit=2)
        if len(parts) >= 3 and parts[1].isdigit():
            uid = int(parts[1])
            txt = parts[2]
            try:
                ttn = extract_ttn(txt)
                if ttn:
                    await bot.send_message(uid, f"–í–∞—à–∞ –¢–¢–ù –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏: <code>{ttn}</code>",
                                           reply_markup=tracking_kb(ttn))
                    await bot.send_message(uid, "–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º üòä",
                                           reply_markup=user_kb())
                else:
                    await bot.send_message(uid, txt, reply_markup=user_kb())
                await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
            except Exception as e:
                await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
            return


# ============================== –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ================================

async def main():
    try:
        # –∑–Ω—ñ–º–∞—î–º–æ webhook —ñ —á–∏—Å—Ç–∏–º–æ —á–µ—Ä–≥—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É getUpdates
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        db.close()


if __name__ == "__main__":
    asyncio.run(main())
